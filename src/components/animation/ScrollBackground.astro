---
interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<div class={`scroll-background ${className || ''}`} data-scroll-background>
  <div class="scroll-layer layer-1" data-scroll-speed="0.2">
    <div class="gradient-orb orb-1"></div>
    <div class="gradient-orb orb-2"></div>
  </div>
  <div class="scroll-layer layer-2" data-scroll-speed="0.5">
    <div class="gradient-orb orb-3"></div>
  </div>
  <div class="scroll-layer layer-3" data-scroll-speed="0.8">
    <div class="grid-pattern"></div>
  </div>
</div>

<style>
  .scroll-background {
    position: fixed;
    inset: 0;
    overflow: hidden;
    z-index: -1;
    pointer-events: none;
  }

  .scroll-layer {
    position: absolute;
    width: 100%;
    height: 120%;
    will-change: transform;
  }

  .gradient-orb {
    position: absolute;
    border-radius: 50%;
    filter: blur(40px);
    opacity: 0.7;
    animation: float 20s infinite ease-in-out;
  }

  .orb-1 {
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, rgba(99, 102, 241, 0.3) 0%, transparent 70%);
    top: -200px;
    left: -200px;
  }

  .orb-2 {
    width: 800px;
    height: 800px;
    background: radial-gradient(circle, rgba(139, 92, 246, 0.3) 0%, transparent 70%);
    bottom: -300px;
    right: -300px;
    animation-delay: -7s;
  }

  .orb-3 {
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, rgba(236, 72, 153, 0.2) 0%, transparent 70%);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation-delay: -14s;
  }

  .grid-pattern {
    position: absolute;
    inset: 0;
    background-image: 
      linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 50px 50px;
    mask-image: radial-gradient(ellipse at center, transparent 0%, black 100%);
  }

  @keyframes float {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    33% { transform: translateY(-30px) rotate(120deg); }
    66% { transform: translateY(30px) rotate(240deg); }
  }

  @media (prefers-reduced-motion: reduce) {
    .gradient-orb {
      animation: none;
    }
  }
</style>

<script>
  // Intersection Observerを使った高性能スクロールアニメーション
  const scrollBackground = document.querySelector('[data-scroll-background]');
  const scrollLayers = document.querySelectorAll('[data-scroll-speed]');
  
  if (scrollBackground && scrollLayers.length > 0) {
    let ticking = false;
    
    function updateLayers() {
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      
      scrollLayers.forEach((layer) => {
        const speed = parseFloat(layer.getAttribute('data-scroll-speed') || '1');
        const yPos = -(scrollY * speed);
        layer.style.transform = `translate3d(0, ${yPos}px, 0)`;
      });
      
      ticking = false;
    }
    
    function requestTick() {
      if (!ticking) {
        window.requestAnimationFrame(updateLayers);
        ticking = true;
      }
    }
    
    // パフォーマンスを考慮したスクロールイベント
    window.addEventListener('scroll', requestTick, { passive: true });
    
    // 初期位置設定
    updateLayers();
  }
</script>